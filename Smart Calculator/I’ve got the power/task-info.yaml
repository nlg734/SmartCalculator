type: edu
custom_name: stage7
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class CalcTest(StageTest):
        def generate(self) -> List[TestCase]:
            cases = {"4 + 6 - 8\n\n\n2 - 3 - 4\n\n8 + 7 - 4\n1 +++ 2 * 3 -- 4\n/exit": "2\n-5\n11\n11\nBye!",
                     "/command\n/exit": "Unknown command\nBye!",
                     "3 + 8 * ((4 + 3) * 2 + 1) - 6 / (2 + 1)\n/exit": "121\nBye!",
                     "8 * 3 + 12 * (4 - 2)\n4 * (2 + 3\n4 + 3)\n/exit": "48\nInvalid expression\nInvalid expression\nBye!",
                     "a = 4\nb = 5\nc = 6\na*2+b*3+c*(2+3)\n/exit": "53\nBye!",
                     "a = 1\na = 2\na = 3\na\n/exit": "3\nBye!"}
            return [TestCase(stdin=case,
                             attach=cases[case])
                    for case in cases]

        def check(self, reply: str, attach) -> CheckResult:
            return CheckResult(reply.strip() == attach.strip(), "")


    if __name__ == '__main__':
        CalcTest("calculator.calculator").run_tests()
  learner_created: false
- name: calculator/calculator.py
  visible: true
  text: |
    # calculator.py
    # written by Natasha Graham
    # JetBrains and Hyperskills Python course

    variables = dict()


    def find_sign(minus):
        if len(minus) % 2 == 0:
            return "+"
        return "-"


    def find_operation(op):
        if "+" in op:
            return "+"
        if "-" in op:
            return find_sign(op)


    def get_total(equation):
        try:
            result = int(equation[0])
        except (TypeError, ValueError):
            try:
                result = int(variables[equation[0]])
            except Exception:
                print("Unknown variable")
                return None
        for i in range(1, len(equation), 2):
            operation = find_operation(equation[i])
            if operation == "+":
                try:
                    result += int(equation[i + 1])
                except (TypeError, ValueError):
                    try:
                        result += int(variables[equation[i + 1]])
                    except IndexError:
                        print("Invalid expression")
                    except Exception:
                        print("Unknown variable")
                        return None
            else:
                try:
                    result -= int(equation[i + 1])
                except (TypeError, ValueError):
                    try:
                        result -= int(variables[equation[i + 1]])
                    except IndexError:
                        print("Invalid expression")
                    except Exception:
                        print("Unknown variable")
                        return None
        return result


    def assign_variables(expression):
        if not expression[0].isalpha() and len(expression) > 1:
            print("Invalid identifier")
        elif len(expression) == 1:
            new_exp = expression[0].split("=")
            variables[new_exp[0]] = new_exp[1]
        elif len(expression) == 2:
            if not expression[1].isalpha() and not expression[1].isdigit():
                print("Invalid assignment")
            else:
                variables[expression[0].strip("=")] = expression[1].strip("=")
        elif len(expression) == 3:
            if expression[2].isalpha():
                variables[expression[0]] = variables[expression[2]]
            elif not expression[2].isalpha() and not expression[2].isdigit():
                print("Invalid assignment")
            else:
                variables[expression[0]] = expression[2]
        else:
            print("Invalid assignment")


    while True:
        nums = input().split()
        if len(nums) == 1:
            if nums[0] == "/exit":
                print("Bye!")
                break
            if nums[0] == "/help":
                print("The program can add and subtract")
                continue
            if "/" == nums[0][0]:
                print("Unknown command")
                continue
            if "=" in nums[0]:
                assign_variables(nums)
                continue
            try:
                print(int(nums[0]))
            except ValueError:
                try:
                    print(variables[nums[0]])
                except Exception:
                    print("Unknown variable")
        elif len(nums) != 0:
            if "=" in nums[0] or "=" in nums[1]:
                assign_variables(nums)
            else:
                total = get_total(nums)
                if total is not None:
                    print(total)
  learner_created: true
feedback_link: https://hyperskill.org/projects/74/stages/415/implement
status: Solved
record: -1

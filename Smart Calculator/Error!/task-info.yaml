type: edu
custom_name: stage5
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class CalcTest(StageTest):
        def generate(self) -> List[TestCase]:
            cases = {"100 + 200 - 300\n/exit": "0\nBye!",
                     "4 + 6 - 8\n\n\n2 - 3 - 4\n\n8 + 7 - 4\n/exit": "2\n-5\n11\nBye!",
                     "abc\n123+\n+15\n18 22\n\n-22\n22-\n/exit": "Invalid expression\nInvalid expression\n15\nInvalid expression\n-22\nInvalid expression\nBye!",
                     "/go\n/exit": "Unknown command\nBye!"}
            return [TestCase(stdin=case,
                             attach=cases[case])
                    for case in cases]

        def check(self, reply: str, attach) -> CheckResult:
            return CheckResult(reply.strip() == attach.strip(), "")


    if __name__ == '__main__':
        CalcTest("calculator.calculator").run_tests()
  learner_created: false
- name: calculator/calculator.py
  visible: true
  text: |
    # calculator.py
    # written by Natasha Graham
    # JetBrains and Hyperskills Python course


    def find_sign(minus):
        if len(minus) % 2 == 0:
            return "+"
        return "-"


    def find_operation(op):
        if "+" in op:
            return "+"
        if "-" in op:
            return find_sign(op)


    def get_total(equation):
        result = int(equation[0])
        for i in range(1, len(equation), 2):
            operation = find_operation(equation[i])
            if operation == "+":
                result += int(equation[i + 1])
            else:
                result -= int(equation[i + 1])
        return result


    to_exit = False
    while not to_exit:
        nums = input().split()
        if len(nums) == 1:
            if nums[0] == "/exit":
                to_exit = True
                print("Bye!")
                break
            if nums[0] == "/help":
                print("The program can add and subtract")
                continue
            print(nums[0])
        elif len(nums) != 0:
            total = get_total(nums)
            print(total)
  learner_created: true
feedback_link: https://hyperskill.org/projects/74/stages/413/implement
status: Solved
record: 5
